apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

group = 'net.greghaines'
version = '2.0.1'

sourceCompatibility=1.7

def props = new Properties();
def localProperties = new File("local.properties")
if (localProperties.exists()) localProperties.withInputStream { props.load(it) }

configurations {
    deployerJars
}

repositories {
   mavenCentral()
}

dependencies {
    compile 'redis.clients:jedis:2.4.1'
    compile 'org.apache.commons:commons-pool2:2.2'
    compile 'org.slf4j:slf4j-api:1.7.6'
    compile 'com.fasterxml.jackson.core:jackson-core:2.3.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.3.2'

    testCompile 'org.hamcrest:hamcrest-all:1.3'

    testCompile 'junit:junit:4.11'
    testCompile 'org.jmock:jmock-junit4:2.6.0'
    testCompile 'org.jmock:jmock-legacy:2.6.0'

    testRuntime 'ch.qos.logback:logback-classic:1.1.1'

    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.1'
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task packageSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives packageJavadoc
    archives packageSources
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: props.get('maven.repository.url')) {
                authentication(userName: props.get('maven.repository.user'), password: props.get('maven.repository.password'))
            }
        }
    }
}

task createWrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-6'
}

